// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	protocol.proto

It has these top-level messages:
	Vector
	Connection
	Cell
	CellComputeBatch
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Vector struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (m *Vector) String() string            { return proto1.CompactTextString(m) }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Vector) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type Connection struct {
	ConnectedTo uint64  `protobuf:"varint,1,opt,name=connected_to,json=connectedTo" json:"connected_to,omitempty"`
	Direction   *Vector `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
}

func (m *Connection) Reset()                    { *m = Connection{} }
func (m *Connection) String() string            { return proto1.CompactTextString(m) }
func (*Connection) ProtoMessage()               {}
func (*Connection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Connection) GetConnectedTo() uint64 {
	if m != nil {
		return m.ConnectedTo
	}
	return 0
}

func (m *Connection) GetDirection() *Vector {
	if m != nil {
		return m.Direction
	}
	return nil
}

type Cell struct {
	Id          uint64        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Pos         *Vector       `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Vel         *Vector       `protobuf:"bytes,3,opt,name=vel" json:"vel,omitempty"`
	Dna         []byte        `protobuf:"bytes,4,opt,name=dna,proto3" json:"dna,omitempty"`
	Connections []*Connection `protobuf:"bytes,5,rep,name=connections" json:"connections,omitempty"`
}

func (m *Cell) Reset()                    { *m = Cell{} }
func (m *Cell) String() string            { return proto1.CompactTextString(m) }
func (*Cell) ProtoMessage()               {}
func (*Cell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Cell) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cell) GetPos() *Vector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Cell) GetVel() *Vector {
	if m != nil {
		return m.Vel
	}
	return nil
}

func (m *Cell) GetDna() []byte {
	if m != nil {
		return m.Dna
	}
	return nil
}

func (m *Cell) GetConnections() []*Connection {
	if m != nil {
		return m.Connections
	}
	return nil
}

type CellComputeBatch struct {
	TimeStep         uint64  `protobuf:"varint,1,opt,name=time_step,json=timeStep" json:"time_step,omitempty"`
	CellsToCompute   []*Cell `protobuf:"bytes,2,rep,name=cells_to_compute,json=cellsToCompute" json:"cells_to_compute,omitempty"`
	CellsInProximity []*Cell `protobuf:"bytes,3,rep,name=cells_in_proximity,json=cellsInProximity" json:"cells_in_proximity,omitempty"`
}

func (m *CellComputeBatch) Reset()                    { *m = CellComputeBatch{} }
func (m *CellComputeBatch) String() string            { return proto1.CompactTextString(m) }
func (*CellComputeBatch) ProtoMessage()               {}
func (*CellComputeBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CellComputeBatch) GetTimeStep() uint64 {
	if m != nil {
		return m.TimeStep
	}
	return 0
}

func (m *CellComputeBatch) GetCellsToCompute() []*Cell {
	if m != nil {
		return m.CellsToCompute
	}
	return nil
}

func (m *CellComputeBatch) GetCellsInProximity() []*Cell {
	if m != nil {
		return m.CellsInProximity
	}
	return nil
}

func init() {
	proto1.RegisterType((*Vector)(nil), "proto.Vector")
	proto1.RegisterType((*Connection)(nil), "proto.Connection")
	proto1.RegisterType((*Cell)(nil), "proto.Cell")
	proto1.RegisterType((*CellComputeBatch)(nil), "proto.CellComputeBatch")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CellInteractionService service

type CellInteractionServiceClient interface {
	ComputeCellInteractions(ctx context.Context, in *CellComputeBatch, opts ...grpc.CallOption) (*CellComputeBatch, error)
}

type cellInteractionServiceClient struct {
	cc *grpc.ClientConn
}

func NewCellInteractionServiceClient(cc *grpc.ClientConn) CellInteractionServiceClient {
	return &cellInteractionServiceClient{cc}
}

func (c *cellInteractionServiceClient) ComputeCellInteractions(ctx context.Context, in *CellComputeBatch, opts ...grpc.CallOption) (*CellComputeBatch, error) {
	out := new(CellComputeBatch)
	err := grpc.Invoke(ctx, "/proto.CellInteractionService/ComputeCellInteractions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CellInteractionService service

type CellInteractionServiceServer interface {
	ComputeCellInteractions(context.Context, *CellComputeBatch) (*CellComputeBatch, error)
}

func RegisterCellInteractionServiceServer(s *grpc.Server, srv CellInteractionServiceServer) {
	s.RegisterService(&_CellInteractionService_serviceDesc, srv)
}

func _CellInteractionService_ComputeCellInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellComputeBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellInteractionServiceServer).ComputeCellInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CellInteractionService/ComputeCellInteractions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellInteractionServiceServer).ComputeCellInteractions(ctx, req.(*CellComputeBatch))
	}
	return interceptor(ctx, in, info, handler)
}

var _CellInteractionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CellInteractionService",
	HandlerType: (*CellInteractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeCellInteractions",
			Handler:    _CellInteractionService_ComputeCellInteractions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

func init() { proto1.RegisterFile("protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x4f, 0xcf, 0x6b, 0xea, 0x40,
	0x10, 0x26, 0x89, 0xca, 0x73, 0xe2, 0x13, 0xdf, 0x1e, 0x9e, 0x4b, 0x7b, 0xa8, 0xcd, 0x49, 0x28,
	0x78, 0x88, 0xf4, 0xd0, 0x6b, 0x3d, 0x49, 0x2f, 0x25, 0x4a, 0x4f, 0x85, 0x60, 0x37, 0x03, 0x5d,
	0x58, 0x77, 0x42, 0xb2, 0x15, 0xf5, 0x9f, 0x29, 0xfd, 0x4f, 0xcb, 0xee, 0xc6, 0x2a, 0xb5, 0x3d,
	0xed, 0x7e, 0xf3, 0xfd, 0x98, 0x6f, 0xa0, 0x5f, 0x56, 0x64, 0x48, 0x90, 0x9a, 0xb8, 0x0f, 0x6b,
	0xbb, 0x27, 0x49, 0xa1, 0xf3, 0x84, 0xc2, 0x50, 0xc5, 0x7a, 0x10, 0x6c, 0x79, 0x30, 0x0a, 0xc6,
	0x61, 0x16, 0x6c, 0x2d, 0xda, 0xf1, 0xd0, 0xa3, 0x9d, 0x45, 0x7b, 0x1e, 0x79, 0xb4, 0x4f, 0x9e,
	0x01, 0x66, 0xa4, 0x35, 0x0a, 0x23, 0x49, 0xb3, 0x6b, 0xe8, 0x09, 0x8f, 0xb0, 0xc8, 0x0d, 0xb9,
	0x88, 0x56, 0x16, 0x7f, 0xcd, 0x96, 0xc4, 0x6e, 0xa0, 0x5b, 0xc8, 0xca, 0xeb, 0x5d, 0x68, 0x9c,
	0xfe, 0xf5, 0x35, 0x26, 0x7e, 0x79, 0x76, 0xe4, 0x93, 0xf7, 0x00, 0x5a, 0x33, 0x54, 0x8a, 0xf5,
	0x21, 0x94, 0x45, 0x13, 0x17, 0xca, 0x82, 0x5d, 0x41, 0x54, 0x52, 0xfd, 0xb3, 0xdf, 0x32, 0x56,
	0xb0, 0x41, 0xe5, 0x7a, 0x9e, 0x0b, 0x36, 0xa8, 0xd8, 0x00, 0xa2, 0x42, 0xaf, 0x78, 0x6b, 0x14,
	0x8c, 0x7b, 0x99, 0xfd, 0xb2, 0x29, 0x1c, 0x8a, 0x4a, 0xd2, 0x35, 0x6f, 0x8f, 0xa2, 0x71, 0x9c,
	0xfe, 0x6b, 0xac, 0xc7, 0x23, 0xb3, 0x53, 0x55, 0xf2, 0x11, 0xc0, 0xc0, 0x36, 0x9c, 0xd1, 0xba,
	0x7c, 0x33, 0x78, 0xbf, 0x32, 0xe2, 0x95, 0x5d, 0x42, 0xd7, 0xc8, 0x35, 0xe6, 0xb5, 0xc1, 0xb2,
	0x29, 0xfd, 0xc7, 0x0e, 0x16, 0x06, 0x4b, 0x76, 0x0b, 0x03, 0x81, 0x4a, 0xd5, 0xb9, 0xa1, 0x5c,
	0x78, 0x17, 0x0f, 0xdd, 0xae, 0xf8, 0xb0, 0x0b, 0x95, 0xca, 0xfa, 0x4e, 0xb4, 0xa4, 0x26, 0x98,
	0xdd, 0x01, 0xf3, 0x36, 0xa9, 0xf3, 0xb2, 0xa2, 0xad, 0x5c, 0x4b, 0xb3, 0xe3, 0xd1, 0xb9, 0xd1,
	0xa7, 0xcf, 0xf5, 0xe3, 0x41, 0x94, 0x22, 0xfc, 0xb7, 0xcc, 0x5c, 0x1b, 0xac, 0x56, 0xae, 0xf7,
	0x02, 0xab, 0x8d, 0x14, 0xc8, 0x1e, 0x60, 0xd8, 0xe4, 0x7f, 0x13, 0xd4, 0x6c, 0x78, 0x92, 0x79,
	0x7a, 0xdc, 0xc5, 0x6f, 0xc4, 0x4b, 0xc7, 0xcd, 0xa7, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x55,
	0x62, 0x1f, 0xb7, 0x5e, 0x02, 0x00, 0x00,
}
